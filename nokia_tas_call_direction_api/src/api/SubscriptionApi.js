/**
 * Nokia TAS Call Direction API
 * The first version of the Nokia TAS Call Direction API is an exciting step forward towards making it easier for developers to have open access to their operator's network.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: openapi.support@nokia.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CallDirectionSubscriptionResponse', 'model/CallDirectionSubscriptionWrapper'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CallDirectionSubscriptionResponse'), require('../model/CallDirectionSubscriptionWrapper'));
  } else {
    // Browser globals (root is window)
    if (!root.NokiaTasCallDirectionApi) {
      root.NokiaTasCallDirectionApi = {};
    }
    root.NokiaTasCallDirectionApi.SubscriptionApi = factory(root.NokiaTasCallDirectionApi.ApiClient, root.NokiaTasCallDirectionApi.CallDirectionSubscriptionResponse, root.NokiaTasCallDirectionApi.CallDirectionSubscriptionWrapper);
  }
}(this, function(ApiClient, CallDirectionSubscriptionResponse, CallDirectionSubscriptionWrapper) {
  'use strict';

  /**
   * Subscription service.
   * @module api/SubscriptionApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SubscriptionApi. 
   * @alias module:api/SubscriptionApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSubscription operation.
     * @callback module:api/SubscriptionApi~createSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallDirectionSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a call direction subscription
     * 
     * @param {module:model/CallDirectionSubscriptionWrapper} callDirectionSubscription Call direction subscription object that needs to be sent to the Nokia TAS
     * @param {module:api/SubscriptionApi~createSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallDirectionSubscriptionResponse}
     */
    this.createSubscription = function(callDirectionSubscription, callback) {
      var postBody = callDirectionSubscription;

      // verify the required parameter 'callDirectionSubscription' is set
      if (callDirectionSubscription == undefined || callDirectionSubscription == null) {
        throw new Error("Missing the required parameter 'callDirectionSubscription' when calling createSubscription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['nokia_mn_api_auth'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = CallDirectionSubscriptionResponse;

      return this.apiClient.callApi(
        '/callnotification/v1/subscriptions/callDirection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubscription operation.
     * @callback module:api/SubscriptionApi~deleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a call direction subscription
     * 
     * @param {String} id Subscription identifier
     * @param {String} addr Subscriber address (SIP address)
     * @param {module:api/SubscriptionApi~deleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSubscription = function(id, addr, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSubscription");
      }

      // verify the required parameter 'addr' is set
      if (addr == undefined || addr == null) {
        throw new Error("Missing the required parameter 'addr' when calling deleteSubscription");
      }


      var pathParams = {
      };
      var queryParams = {
        'Id': id,
        'addr': addr
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['nokia_mn_api_auth'];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/callnotification/v1/subscriptions/callDirection/subs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscription operation.
     * @callback module:api/SubscriptionApi~getSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallDirectionSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read a call direction subscription
     * 
     * @param {String} id Subscription identifier
     * @param {String} addr Subscriber address (SIP address)
     * @param {module:api/SubscriptionApi~getSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallDirectionSubscriptionResponse}
     */
    this.getSubscription = function(id, addr, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling getSubscription");
      }

      // verify the required parameter 'addr' is set
      if (addr == undefined || addr == null) {
        throw new Error("Missing the required parameter 'addr' when calling getSubscription");
      }


      var pathParams = {
      };
      var queryParams = {
        'Id': id,
        'addr': addr
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['nokia_mn_api_auth'];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = CallDirectionSubscriptionResponse;

      return this.apiClient.callApi(
        '/callnotification/v1/subscriptions/callDirection/subs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
